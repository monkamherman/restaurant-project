
services:
  manager:
    image: node:20-alpine
    build:
      context: ./server/manager  # Dossier contenant le Dockerfile
    container_name: manager
    working_dir: /app
    volumes:
      - ./server/manager:/app  # Monte le dossier du manager dans /app
    environment:
      - NODE_ENV=development
    command: >
      sh ./start.sh  # Commande pour démarrer l'application
    ports:
      - '4000:4000'  # Expose le port 4000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.manager.rule=Host(`manager.local`)"
      - "traefik.http.routers.manager.entrypoints=web"
      - "traefik.http.routers.manager.tls=true"
      - "traefik.http.routers.manager.tls.certresolver=myresolver"
    networks:
      - traefik
    restart: always
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]  # Vérifie que le service est en bonne santé
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongo:
    image: mongo:6.0  # Utilise MongoDB version 6.0
    container_name: mongo
    volumes:
      - mongo_data:/data/db  # Persiste les données MongoDB
    networks:
      - traefik
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo_data:  # Volume pour MongoDB

networks:
  traefik:
    external: true  # Utilise un réseau externe pour Traefik