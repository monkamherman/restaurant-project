// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model user {
  user_id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numero Int

  reservations Reservation[]
  commandes   commande[]
  avis        avis[]
}

model table {
  table_id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  status TableStatus @default(AVAILABLE)
  capacity Int


    reservations Reservation[]
}

model plat {
  plat_id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  price Float
  image String?
  category String
  likes Int? @default(0)
  categorie PlatsCategory


   commandes CommandePlat[]

}

model commande {
  commande_id String @id @default(auto()) @map("_id") @db.ObjectId
  status CommandeStatus @default(en_attente)
  prix Float
  nombreDePlats Int
  adresse String
  date DateTime @default(now())

  userId String @db.ObjectId
   users     user      @relation(fields: [userId], references: [user_id])
  plats    CommandePlat[]
}

model avis {
  avis_id String @id @default(auto()) @map("_id") @db.ObjectId
  message String
  date DateTime @default(now())


  userId String @db.ObjectId
   users    user      @relation(fields: [userId], references: [user_id])
 
}

model Reservation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  tableId         String    @db.ObjectId
  date            DateTime
  numberOfPeople  Int

  // Relations
  user            user      @relation(fields: [userId], references: [user_id])
  table           table     @relation(fields: [tableId], references: [table_id])
}

model CommandePlat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  commandeId String   @db.ObjectId
  platId     String   @db.ObjectId

  commande   commande @relation(fields: [commandeId], references: [commande_id])
  plat       plat     @relation(fields: [platId], references: [plat_id])

  @@unique([commandeId, platId]) // Garantit que la combinaison est unique
}
enum CommandeStatus {
  en_attente
  confirmer
  experdier
  annuler
  livrer
}

enum PlatsCategory {
  STARTER
  MAIN
  DESSERT
  DRINK
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}